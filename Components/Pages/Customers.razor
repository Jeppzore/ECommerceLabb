@rendermode InteractiveServer
@using ECommerceLabb.Services
@using ECommerceLabb.Models;
@page "/customers"
@inject CustomerService CustomerService
@inject CustomerStateService CustomerState
@inject NavigationManager NavManager

<PageTitle>Customers</PageTitle>

<div class="container mt-4">
    <h3 class="mb-4">Customers</h3>

    @if (customers == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="row">
            @foreach (var customer in customers!)
            {
                <div class="col-md-4 mb-3">
                    <div class="card customer-card shadow-sm border-2">
                        <div class="card-body">
                            <h5 class="card-title">@customer.FirstName @customer.LastName</h5>
                            <h6 class="card-subtitle mb-2 text-muted">@customer.Email</h6>

                            <p class="card-text">
                                <i class="fas fa-home me-2"></i>@customer.Address <br />
                                <i class="fas fa-phone-alt me-2"></i>@customer.PhoneNumber
                            </p>

                            <div class="d-flex justify-content-between">
                                <button class="btn btn-primary btn-sm" @onclick="() => NavigateToUpdate(customer)">
                                    Update
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

@* @if (customers == null)
{
	<p>Loading...</p>
}
else
{
	<ul>
		@foreach (var customer in customers!)
		{
			<li>Full name: @customer.FirstName @customer.LastName</li>
			<li>Email: @customer.Email</li>
			<li>Address: @customer.Address</li>
			<li>Phone number: @customer.PhoneNumber</li>
			<p>
				<button @onclick="() => NavigateToUpdate(customer)"> Update </button>
			</p>
			<hr />
		}
	</ul>
} *@

@code {
	private List<Customer>? customers;

	protected override async Task OnInitializedAsync()
	{
		customers = await CustomerService.GetCustomersAsync();
	}

	private void NavigateToUpdate(Customer customer)
	{
		Console.WriteLine("Navigating to update..");
		CustomerState.SetSelectedCustomer(customer);
		NavManager.NavigateTo("/updatecustomers");
		Console.WriteLine("NAVIGATED!");
	}
}
