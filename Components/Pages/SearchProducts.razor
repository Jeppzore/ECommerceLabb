@rendermode InteractiveServer

@using ECommerceLabb.Services
@using ECommerceLabb.Models;
@using Microsoft.AspNetCore.Components.Server;
@using System.Text.Json

@page "/searchproducts"

@inject ProductService ProductService
@inject ProductStateService ProductState
@inject NavigationManager NavManager

<PageTitle>Search Products</PageTitle>
<h3 class="mb-3">Search Products!</h3>
<hr />

@if (isConflict)
{
	<div class="alert alert-danger" role="alert">
		<b>Search failed:</b> A product with that name does not exist: <b>@product!.Name</b>
	</div>
}

@if (isSubmitted)
{
	<div class="alert alert-success" role="alert">
		Search successful! - <b>@product!.Name</b>
	</div>

	<div class="card shadow-sm border-1 mt-3" style="max-width: 400px;">
		<div class="card-body">
			<h5 class="card-title">@product!.Name</h5>
			<h6 class="card-subtitle text-muted">Product Number: @product!.ProductNumber</h6>
			<p class="card-text mt-2">@product!.Description</p>

			<ul class="list-group list-group-flush">
				<li class="list-group-item"><b>Price:</b> $@product!.Price</li>
				<li class="list-group-item"><b>Category:</b> @product!.Category</li>
				<li class="list-group-item"><b>Status:</b> @(product!.Status == ProductStatus.Available ? "🟢 Available" : "🔴 Unavailable")</li>
			</ul>
		</div>
	</div>
}
else
{
	<EditForm Model="product" OnValidSubmit="HandleSubmit" FormName="SearchForm" Enhance>
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="mb-3">
			<label class="form-label">Search by name:</label>
			<InputText @bind-Value="product!.Name" class="form-control" />
		</div>

		<button type="submit" class="btn btn-primary">Search</button>
	</EditForm>
}

@code {
	[SupplyParameterFromForm]
	public Product? product { get; set; } = new();

	public bool isSubmitted = false;
	public bool isConflict = false;
	public string searchValue = string.Empty;

	public async Task HandleSubmit()
	{
		searchValue = product!.Name;
		try
		{
			var productResult = await ProductService.GetproductByNameAsync(product!.Name!);			
			if (productResult != null)
			{
				product = productResult;
				isSubmitted = true;
			}
			else
			{
				isConflict = true;
			}

		}
		catch (Exception ex)
		{
			Console.WriteLine($"Unexpected error: {ex.Message}");
			isConflict = true;
			isSubmitted = false;
		}
	}
}
