@rendermode InteractiveServer

@using ECommerceLabb.Services
@using ECommerceLabb.Models;
@using Microsoft.AspNetCore.Components.Server;
@using System.Text.Json

@page "/searchproducts"

@inject ProductService ProductService
@inject ProductStateService ProductState
@inject NavigationManager NavManager

<h3>Search Products!</h3>
<hr />

@if (isConflict)
{
	<p><b>Search failed</b> A product with that name does not exists.</p>
}

@if (isSubmitted)
{
	<p>Search successful! - <b>@product!.Name</b> </p>
	<ul>
		<li>Name: @product!.Name</li>
		<li>Product Number: @product!.ProductNumber</li>
		<li>Price: @product!.Price</li>
		<li>Description: @product!.Description</li>
		<li>Category: @product!.Category</li>
		<li>Available: @product!.Status</li>
	</ul>
}
else
{
	<EditForm Model="product" OnValidSubmit="HandleSubmit" FormName="SearchForm" Enhance>
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div>
			<label>Search by name:</label>
			<InputText @bind-Value="product!.Name" />
		</div>

		<br />
		<button type="submit">Search </button>
	</EditForm>
}

@code {
	[SupplyParameterFromForm]
	public Product? product { get; set; } = new();

	public bool isSubmitted = false;
	public bool isConflict = false;

	public async Task HandleSubmit()
	{
		try
		{
			var productResult = await ProductService.GetproductByNameAsync(product!.Name!);			
			if (productResult != null)
			{
				product = productResult;
				isSubmitted = true;
			}
			else
			{
				isConflict = true;
			}

		}
		catch (Exception ex)
		{
			Console.WriteLine($"Unexpected error: {ex.Message}");
			isConflict = true;
			isSubmitted = false;
		}
	}
}
