@rendermode InteractiveServer
@page "/orders"
@using ECommerceLabb.Models
@using ECommerceLabb.Services
@inject CustomerService CustomerService
@inject ProductService ProductService
@inject OrderService OrderService

<PageTitle>Place an Order</PageTitle>

	<h3 class="mb-3">Place an Order</h3>

	@if (!isProductSelected)
	{
		<div class="alert alert-danger" role="alert">
			<b>No products selected.</b> Failed to create order.
		</div>
	}

	@if (orderPlaced)
	{
		<div class="alert alert-success" role="alert">
			<b>Thank you!</b> Your order has been placed successfully.
		</div>
	}
	else
	{
		<div class="card shadow-sm border-0 p-4" style="max-width: 600px;">
			<div class="card-body">

				<EditForm Model="@newOrder" OnValidSubmit="SubmitOrder" FormName="SubmitOrderForm" Enhance>
					<DataAnnotationsValidator />
					<ValidationSummary />

					@* Customer Selection *@
					<div class="mb-3">
						<label class="form-label"><b>Select Customer:</b></label>
						<select class="form-select" @bind="newOrder.CustomerId">
							<option value="">-- Select --</option>
							@foreach (var customer in customers)
							{
								<option value="@customer.Id">@customer.FirstName @customer.LastName</option>
							}
						</select>
					</div>

					@* Product Selection *@
					<div class="mb-3">
						<label class="form-label"><b>Select Products:</b></label>
						<div class="list-group">
							@foreach (var product in products)
							{
								<div class="list-group-item d-flex justify-content-between align-items-center">
									<div>
										<input type="checkbox" class="form-check-input me-2" @bind="@productSelections[product.Id!]" />
										<span>@product.Name - $@product.Price</span>
									</div>
									<input type="number" min="1" @bind="quantities[product.Id!]" class="form-control" placeholder="Qty" style="width: 70px;" />
								</div>
							}
						</div>
					</div>

					<button type="submit" class="btn btn-primary w-100">Place Order</button>
				</EditForm>
			</div>
		</div>
	}

@code {
	private List<Customer> customers = new();
	private List<Product> products = new();
	private Dictionary<string, bool> productSelections = new();
	private Dictionary<string, int> quantities = new();
	private Order newOrder = new();
	private bool orderPlaced = false;
	private bool isProductSelected = true;

	protected override async Task OnInitializedAsync()
	{
		customers = await CustomerService.GetCustomersAsync() ?? new List<Customer>();
		products = await ProductService.GetproductsAsync() ?? new List<Product>();

		// Ensure every product ID exists in the dictionaries
		foreach (var product in products)
		{
			productSelections[product.Id!] = false; // Default unchecked
			quantities[product.Id!] = 1; // Default quantity = 1
		}
	}

	private async Task SubmitOrder()
	{
		Console.WriteLine($"Selected customer Id: {newOrder.CustomerId}");

		if (string.IsNullOrEmpty(newOrder.CustomerId))
		{
			Console.WriteLine("No customer selected.");
			return;
		}

		var selectedProducts = products
			.Where(p => productSelections.ContainsKey(p.Id!) && productSelections[p.Id!])
			.Select(p => new OrderItem
				{
					ProductId = p.Id!,
					ProductName = p.Name,
					Price = p.Price,
					Quantity = quantities.ContainsKey(p.Id!) ? quantities[p.Id!] : 1
				})
			.ToList();
			Console.WriteLine($"selectedProducts = {selectedProducts.ToList()}");

		if (!selectedProducts.Any())
		{
			Console.WriteLine("No products selected.");
			isProductSelected = false;
			return;
		}

		newOrder = new Order
		{
			CustomerId = newOrder.CustomerId,
			Items = selectedProducts,
			TotalPrice = selectedProducts.Sum(p => p.Price * p.Quantity)
		};

		var success = await OrderService.PlaceOrderAsync(newOrder);
		if (success)
		{
			orderPlaced = true;
		}
	}
}
