@rendermode InteractiveServer
@page "/orders"
@using ECommerceLabb.Models
@using ECommerceLabb.Services
@inject CustomerService CustomerService
@inject ProductService ProductService
@inject OrderService OrderService

<PageTitle>Place an Order</PageTitle>

<h3>Place an Order</h3>
<hr />

@if (isProductSelected == false)
{
	<h5> No products selected. Failed to create order.</h5>
	<br />
}


@if (orderPlaced)
{
	<p>Thank you! Your order has been placed.</p>
}
else
{
	<EditForm Model="@newOrder" OnValidSubmit="SubmitOrder" FormName="SubmitOrderForm" Enhance>
		<DataAnnotationsValidator />
		<ValidationSummary />

		@* Customer Dropdown *@
		<div>
			<label>Select Customer:</label>
			<select @bind="newOrder.CustomerId">
				<option value="">-- Select --</option>
				@foreach (var customer in customers)
				{
					<option value="@customer.Id">@customer.FirstName @customer.LastName</option>	
				}
			</select>

		</div>

		<div>
			<label>Select Products:</label>
			<div>
				@foreach (var product in products)
				{
					<div>
						<input type="checkbox" @bind="@productSelections[product.Id!]" />
						<span>@product.Name - $@product.Price</span>
						<input type="number" min=" =1" @bind="quantities[product.Id!]" placeholder="Qty" style="width: 50px;" />
					</div>
				}
			</div>
		</div>

		<button type="submit">Place Order</button>
	</EditForm>
}

@code {
	private List<Customer> customers = new();
	private List<Product> products = new();
	private Dictionary<string, bool> productSelections = new();
	private Dictionary<string, int> quantities = new();
	private Order newOrder = new();
	private bool orderPlaced = false;
	private bool isProductSelected = true;

	protected override async Task OnInitializedAsync()
	{
		customers = await CustomerService.GetCustomersAsync() ?? new List<Customer>();
		products = await ProductService.GetproductsAsync() ?? new List<Product>();

		// Ensure every product ID exists in the dictionaries
		foreach (var product in products)
		{
			productSelections[product.Id!] = false; // Default unchecked
			quantities[product.Id!] = 1; // Default quantity = 1
		}
	}

	private async Task SubmitOrder()
	{
		Console.WriteLine($"Selected customer Id: {newOrder.CustomerId}");

		if (string.IsNullOrEmpty(newOrder.CustomerId))
		{
			Console.WriteLine("No customer selected.");
			return;
		}

		var selectedProducts = products
			.Where(p => productSelections.ContainsKey(p.Id!) && productSelections[p.Id!])
			.Select(p => new OrderItem
				{
					ProductId = p.Id!,
					ProductName = p.Name,
					Price = p.Price,
					Quantity = quantities.ContainsKey(p.Id!) ? quantities[p.Id!] : 1
				})
			.ToList();
			Console.WriteLine($"selectedProducts = {selectedProducts.ToList()}");

		if (!selectedProducts.Any())
		{
			Console.WriteLine("No products selected.");
			isProductSelected = false;
			return;
		}

		newOrder = new Order
		{
			CustomerId = newOrder.CustomerId,
			Items = selectedProducts,
			TotalPrice = selectedProducts.Sum(p => p.Price * p.Quantity)
		};

		var success = await OrderService.PlaceOrderAsync(newOrder);
		if (success)
		{
			orderPlaced = true;
		}
	}
}
