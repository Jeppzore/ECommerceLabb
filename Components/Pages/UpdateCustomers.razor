@rendermode InteractiveServer

@using ECommerceLabb.Services
@using ECommerceLabb.Models
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Server;

@page "/updatecustomers"

@inject CustomerService CustomerService
@inject CustomerStateService CustomerState

<PageTitle>Update Customer</PageTitle>
<h3>Update your customer here</h3>
<hr />

@if (isConflict)
{
	<p><b>Failed to Create the product!</b> You haven't filled in the forms correctly.'</p>
}

@if (isSubmitted)
{
	<p>Registration successful!</p>
}

@if (customers == null)
{
	<p>Loading products...</p>
}
else
{

	<label for="customer"> <b> Selected Customer: </b> <i> @CustomerState.SelectedCustomer!.FirstName @CustomerState.SelectedCustomer.LastName  </i> </label>

	<br />
	<br />

	// Product number
	<label>First Name:</label>
	<input @bind="CustomerState.SelectedCustomer!.FirstName" />
	<br />
	// Name
	<label>Last Name:</label>
	<input @bind="CustomerState.SelectedCustomer!.LastName" />
	<br />
	// Price
	<label>Email:</label>
	<input @bind="CustomerState.SelectedCustomer!.Email" />
	<br />
				// Description
	<label>Address:</label>
	<input @bind="CustomerState.SelectedCustomer!.Address" />
	<br />
	// Category
	<label>Phone Number:</label>
	<input @bind="CustomerState.SelectedCustomer!.PhoneNumber" />

	<br />
	<button @onclick="SaveChanges"> Save </button>
}

@code {
	private List<Customer>? customers;
	private string? selectedCustomerId;

	public bool isSubmitted = false;
	public bool isConflict = false;


	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine($"Looking for available products.. ");
		try
		{
			customers = await CustomerService.GetCustomersAsync();
			if (customers == null)
			{
				Console.WriteLine("customer list is still null!");
			}
			else
			{
				Console.WriteLine($"Loaded {customers.Count} customers.");
			}
		}
		catch (Exception ex)
		{

			Console.WriteLine($"Error while loading customers: {ex.Message}");
		}
	}

	private async Task SaveChanges()
	{
		if (CustomerState.SelectedCustomer != null)
		{
			var success = await CustomerService.UpdateCustomerAsync(CustomerState.SelectedCustomer.Id!, CustomerState.SelectedCustomer);
			if (success)
			{
				isSubmitted = true;
			}
			else
			{
				isConflict = true;
			}
		}
	}
}
