@rendermode InteractiveServer

@using ECommerceLabb.Services
@using ECommerceLabb.Models
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Server;

@page "/updatecustomers"

@inject CustomerService CustomerService
@inject CustomerStateService CustomerState

<PageTitle>Update Customer</PageTitle>

<h3 class="mb-3">Update your customer here</h3>
<hr />

@if (isConflict)
{
	<div class="alert alert-danger" role="alert">
		<b>Failed to update the customer!</b> Please check that all fields are correct.
	</div>
}

@if (isSubmitted)
{
	<div class="alert alert-success" role="alert">
		<b>Update successful!</b> The customer has been saved.
	</div>
}

@if (customers == null)
{
	<p>Loading products...</p>
}
else
{
	<div class="card shadow-sm border-0 p-4" style="max-width: 500px;">
		<div class="card-body">
			<div class="mb-3">
				<label class="form-label">Selected Customer: <b>@CustomerState.SelectedCustomer!.FirstName @CustomerState.SelectedCustomer.LastName</b></label>
			</div>

			<h5 class="card-title mb-3">Edit Customer</h5>

			<div class="mb-3">
				<label class="form-label">First Name:</label>
				<InputText @bind-Value="CustomerState.SelectedCustomer!.FirstName" class="form-control" />
			</div>

			<div class="mb-3">
				<label class="form-label">Last Name:</label>
				<InputText @bind-Value="CustomerState.SelectedCustomer!.LastName" class="form-control" />
			</div>

			<div class="mb-3">
				<label class="form-label">Email:</label>
				<InputText @bind-Value="CustomerState.SelectedCustomer!.Email" class="form-control" disabled />
			</div>

			<div class="mb-3">
				<label class="form-label">Address:</label>
				<InputText @bind-Value="CustomerState.SelectedCustomer!.Address" class="form-control" />
			</div>

			<div class="mb-3">
				<label class="form-label">Phone Number:</label>
				<InputText @bind-Value="CustomerState.SelectedCustomer!.PhoneNumber" class="form-control" />
			</div>

			<button class="btn btn-primary w-100" @onclick="SaveChanges">Save Changes</button>
		</div>
	</div>
}


@code {
	private List<Customer>? customers;
	private string? selectedCustomerId;

	public bool isSubmitted = false;
	public bool isConflict = false;


	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine($"Looking for available products.. ");
		try
		{
			customers = await CustomerService.GetCustomersAsync();
			if (customers == null)
			{
				Console.WriteLine("customer list is still null!");
			}
			else
			{
				Console.WriteLine($"Loaded {customers.Count} customers.");
			}
		}
		catch (Exception ex)
		{

			Console.WriteLine($"Error while loading customers: {ex.Message}");
		}
	}

	private async Task SaveChanges()
	{
		isConflict = string.IsNullOrWhiteSpace(CustomerState.SelectedCustomer!.FirstName) ||
					 string.IsNullOrWhiteSpace(CustomerState.SelectedCustomer!.LastName) ||
					 string.IsNullOrWhiteSpace(CustomerState.SelectedCustomer!.Address) ||
					 string.IsNullOrWhiteSpace(CustomerState.SelectedCustomer!.PhoneNumber);

		// Return if any or all inputfields are empty.
		if (isConflict)
		{
			isSubmitted = false;
			return;
		}


		if (CustomerState.SelectedCustomer != null)
		{
			var success = await CustomerService.UpdateCustomerAsync(CustomerState.SelectedCustomer.Email!, CustomerState.SelectedCustomer);
			if (success)
			{
				isSubmitted = true;
			}
			else
			{
				isConflict = true;
			}
		}
	}
}
