@rendermode InteractiveServer

@using ECommerceLabb.Services
@using ECommerceLabb.Models
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Server;

@page "/updateproducts"

@inject CustomerService CustomerService
@inject ProductService ProductService
@inject ProductStateService ProductState

<PageTitle>Update Product</PageTitle>
<h3>Update your products here!</h3>

@if (products == null)
{
	<p>Loading products...</p>
}
else
{
	@* <p> Selected Product: @ProductState.SelectedProduct!.Name</p> *@

	<label for="product"> Select Product: </label>
	<select @bind="selectedProductId">
		@foreach (var product in products!)
		{
			<option value="@product.Id"> @product.Name </option>
		}
	</select>

	<br />

	<label>Name:</label>
	<input @bind="ProductState.SelectedProduct.Name" />

	<br />

	<label>Available:</label>
	<input type="checkbox" @bind="ProductState.SelectedProduct.Status"/>

	<br />

	<button @onclick="SaveChanges"> Save </button>
}

@code {
	private List<Product>? products;
	private string? selectedProductId;

	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine($"Looking for available products.. ");
		try
		{
			products = await ProductService.GetproductsAsync();
			if (products == null)
			{
				Console.WriteLine("Product list is still null!");
			}
			else
			{
				Console.WriteLine($"Loaded {products.Count} products.");
			}
		}
		catch (Exception ex)
		{
			
			Console.WriteLine($"Error while loading products: {ex.Message}");
		}
	}

	private async Task SaveChanges()
	{
		if (ProductState.SelectedProduct != null)
		{
			await ProductService.UpdateProductAsync(ProductState.SelectedProduct.Id!, ProductState.SelectedProduct);
		}
	}
}
