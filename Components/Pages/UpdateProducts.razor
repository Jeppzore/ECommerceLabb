@rendermode InteractiveServer

@using ECommerceLabb.Services
@using ECommerceLabb.Models
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Server;

@page "/updateproducts"

@inject CustomerService CustomerService
@inject ProductService ProductService
@inject ProductStateService ProductState

<PageTitle>Update Product</PageTitle>
<h3>Update your product here</h3>
<hr />

@if (isConflict)
{
	<p><b>Failed to Create the product!</b> You haven't filled in the forms correctly.'</p>
}

@if (isSubmitted)
{
	<p>Registration successful!</p>
}

@if (products == null)
{
	<p>Loading products...</p>
}
else
{

	<label for="product"> <b> Selected Product: </b> <i> @ProductState.SelectedProduct!.Name </i> </label>

	<br />
	<br />

	// Product number
	<label>Product Number:</label>
	<input @bind="ProductState.SelectedProduct!.ProductNumber" />
	<br />
	// Name
	<label>Name:</label>
	<input @bind="ProductState.SelectedProduct!.Name" />
	<br />
	// Price
	<label>Price:</label>
	<input @bind="ProductState.SelectedProduct!.Price" />
	<br />
	// Description
	<label>Description:</label>
	<input @bind="ProductState.SelectedProduct!.Description" />
	<br />
	// Category
	<label>Category:</label>
	<input @bind="ProductState.SelectedProduct!.Category" />
	<br />
	// Status
	<label>Available:</label>
	<input type="checkbox" checked="@isChecked" @oninput="CheckboxChanged">

	<br />
	<button @onclick="SaveChanges"> Save </button>
}

@code {
	private List<Product>? products;
	private string? selectedProductId;

	public bool IsChecked { get; set; } = true;
	private bool isChecked;

	public bool isSubmitted = false;
	public bool isConflict = false;

	// updates the internal value whenver the component is updated
	protected override void OnParametersSet()
	{
		isChecked = this.IsChecked;		
	}
	

	private void CheckboxChanged(ChangeEventArgs e)
	{
		// get the checkbox state
		var value = e.Value;
		Console.WriteLine($"Checkbox changed {IsChecked}");

		if (isChecked == true)
		{
			ProductState.SelectedProduct!.Status = ProductStatus.Unavailable;
			isChecked = false;
		}
		else
		{
			ProductState.SelectedProduct!.Status = ProductStatus.Available;
		}
	}

	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine($"Looking for available products.. ");
		try
		{
			products = await ProductService.GetproductsAsync();
			if (products == null)
			{
				Console.WriteLine("Product list is still null!");
			}
			else
			{
				Console.WriteLine($"Loaded {products.Count} products.");
			}
		}
		catch (Exception ex)
		{
			
			Console.WriteLine($"Error while loading products: {ex.Message}");
		}
	}

	private async Task SaveChanges()
	{
		if (ProductState.SelectedProduct != null)
		{
			var success = await ProductService.UpdateProductAsync(ProductState.SelectedProduct.Id!, ProductState.SelectedProduct);
			if (success)
			{
				isSubmitted = true;
			}
			else
			{
				isConflict = true;
			}
		}
	}
}
