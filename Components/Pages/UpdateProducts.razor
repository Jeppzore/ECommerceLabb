@rendermode InteractiveServer

@using ECommerceLabb.Services
@using ECommerceLabb.Models
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Server;

@page "/updateproducts"

@inject CustomerService CustomerService
@inject ProductService ProductService
@inject ProductStateService ProductState

<PageTitle>Update Product</PageTitle>

<h3 class="mb-3">Update your product here</h3>
<hr />

@if (isConflict)
{
	<div class="alert alert-danger" role="alert">
		<b>Failed to update the product!</b> Please check that all fields are filled correctly.
	</div>
}

@if (isSubmitted)
{
	<div class="alert alert-success" role="alert">
		<b>Update successful!</b> The product has been saved.
	</div>
}

@if (products == null)
{
	<p>Loading products...</p>
}
else
{
	<div class="card shadow-sm border-0 p-4" style="max-width: 500px;">
		<div class="card-body">
			<div class="mb-3">
				<label class="form-label">Selected Product: <b>@ProductState.SelectedProduct!.Name</b></label>
			</div>

			<h5 class="card-title mb-3">Edit Product</h5>

			<div class="mb-3">
				<label class="form-label">Product Number:</label>
				<InputText @bind-Value="ProductState.SelectedProduct!.ProductNumber" class="form-control" />
			</div>

			<div class="mb-3">
				<label class="form-label">Name:</label>
				<InputText @bind-Value="ProductState.SelectedProduct!.Name" class="form-control" />
			</div>

			<div class="mb-3">
				<label class="form-label">Price:</label>
				<InputNumber @bind-Value="ProductState.SelectedProduct!.Price" class="form-control" />
			</div>

			<div class="mb-3">
				<label class="form-label">Description:</label>
				<InputText @bind-Value="ProductState.SelectedProduct!.Description" class="form-control" />
			</div>

			<div class="mb-3">
				<label class="form-label">Category:</label>
				<select @bind="ProductState.SelectedProduct!.Category" class="form-select">
					<option value="">-- Select --</option>
					@foreach (var category in Enum.GetValues<ProductCategory>())
					{
						<option value="@category">@category</option>
					}
				</select>
			</div>

			<div class="form-check mb-3">
				<input type="checkbox" checked="@isChecked" @oninput="CheckboxChanged" class="form-check-input" id="availableCheckbox">
				<label class="form-check-label" for="availableCheckbox">Available</label>
			</div>

			<button class="btn btn-primary w-100" @onclick="SaveChanges">Save Changes</button>
		</div>
	</div>
}

@code {
	private List<Product>? products;
	private string? selectedProductId;

	public bool IsChecked { get; set; } = true;
	private bool isChecked;

	public bool isSubmitted = false;
	public bool isConflict = false;

	// updates the internal value whenver the component is updated
	protected override void OnParametersSet()
	{
		isChecked = this.IsChecked;		
	}
	

	private void CheckboxChanged(ChangeEventArgs e)
	{
		// get the checkbox state
		var value = e.Value;
		Console.WriteLine($"Checkbox changed {IsChecked}");

		if (isChecked == true)
		{
			ProductState.SelectedProduct!.Status = ProductStatus.Unavailable;
			isChecked = false;
		}
		else
		{
			ProductState.SelectedProduct!.Status = ProductStatus.Available;
		}
	}

	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine($"Looking for available products.. ");
		try
		{
			products = await ProductService.GetproductsAsync();
			if (products == null)
			{
				Console.WriteLine("Product list is still null!");
			}
			else
			{
				Console.WriteLine($"Loaded {products.Count} products.");
			}
		}
		catch (Exception ex)
		{
			
			Console.WriteLine($"Error while loading products: {ex.Message}");
		}
	}

	private async Task SaveChanges()
	{
		if (ProductState.SelectedProduct != null)
		{
			var success = await ProductService.UpdateProductAsync(ProductState.SelectedProduct.Id!, ProductState.SelectedProduct);
			if (success)
			{
				isSubmitted = true;
			}
			else
			{
				isConflict = true;
			}
		}
	}
}
