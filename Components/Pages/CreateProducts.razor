@rendermode InteractiveServer

@using ECommerceLabb.Services
@using ECommerceLabb.Models
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Forms

@page "/createproducts"

@inject CustomerService CustomerService
@inject ProductService ProductService
@inject ProductStateService ProductState

<PageTitle>Create Products</PageTitle>
<h3>Let your imagination flow!</h3>

@if (isConflict)
{
	<p><b>Failed to create!</b> A product with that productnumber already exists, or you haven't filled in all the forms.</p>
}

@if (isSubmitted)
{
	<p>Creation successful!</p>
}
else
{
	<EditForm Model="product" OnValidSubmit="HandleSubmit" FormName="SubmitForm" Enhance>
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div>
			<label>Product Number:</label>
			<InputText @bind-Value="product!.ProductNumber" />
		</div>

		<div>
			<label>Name:</label>
			<InputText @bind-Value="product.Name" />
		</div>

		<div>
			<label>Price:</label>
			<InputNumber @bind-Value="product.Price" />
		</div>

		<div>
			<label>Description:</label>
			<InputText @bind-Value="product.Description" />
		</div>

		<label>Category:</label>
	<select @bind="product.Category">
		<option value="">-- Select --</option>
		@foreach (var category in Enum.GetValues<ProductCategory>())
		{
			<option value="@category">@category</option>
		}
	</select>


		<button type="submit">Create Product </button>
	</EditForm>
}

@code {
	[SupplyParameterFromForm]
	public Product? product { get; set; } = new();

	public bool isSubmitted = false;
	public bool isConflict = false;

	public async Task HandleSubmit()
	{
		Console.WriteLine("Form submitted. Checking product object...");
		Console.WriteLine(JsonSerializer.Serialize(product, new JsonSerializerOptions { WriteIndented = true }));

		var success = await ProductService.CreateProductAsync(product!);
		Console.WriteLine("API call result: " + success);
		if (success)
		{
			isSubmitted = true;
		}
		else
		{
			isConflict = true;
		}
	}
}
