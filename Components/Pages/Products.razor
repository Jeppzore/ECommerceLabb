@rendermode InteractiveServer
@using ECommerceLabb.Services
@using ECommerceLabb.Models;
@using Microsoft.AspNetCore.Components.Server;
@using System.Text.Json
@page "/products"
@inject ProductService ProductService
@inject ProductStateService ProductState
@inject NavigationManager NavManager

<PageTitle>Products</PageTitle>

<h3>Products</h3>

@if (products == null)
{
	<p>Loading...</p>
}
else
{
	<ul>
		@foreach (var product in products!)
		{
			<li>
				@product.Name ($@product.Price)
				<br/> "@product.Description" 
				<br>
				<br/> Category: @product.Category 
				<br/> Status: @product.Status				
				<p>
					<button @onclick="() => NavigateToUpdate(product)"> Update </button>
					<button @onclick="() => DeleteProduct(product.Id!)"> Delete </button>
				</p>
			</li>
			<hr />
		}
	</ul>
}

@code {
	private List<Product>? products;

	protected override async Task OnInitializedAsync()
	{
		Console.WriteLine("Looking for available products..");
		products = await ProductService.GetproductsAsync();
		Console.WriteLine($"Result after looking for products: {products!.Count}");

	}

	private void NavigateToUpdate(Product product)
	{
		ProductState.SetSelectedProduct(product);
		NavManager.NavigateTo("/updateproducts");
	}

	// private async Task UpdateProduct(Product product)
	// {
	// 	bool success = await ProductService.UpdateProductAsync(product.Id!, product);
	// 	if (success)
	// 	{
	// 		Console.WriteLine($"Product {product.Id} updated successfully!");
	// 	}
	// 	else
	// 	{
	// 		Console.WriteLine($"Failed to update product {product.Id}.");
	// 	}
	// }

	private async Task DeleteProduct(string productId)
	{
		Console.WriteLine($"DeleteProduct called with ID: {productId}"); // Debug-logg
		bool success = await ProductService.DeleteProductAsync(productId);

		if (success)
		{
			// Update list locally
			products = products!.Where(p => p.Id != productId).ToList();
		}
		StateHasChanged();
	}
}
